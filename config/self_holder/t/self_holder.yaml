%YAML:1.0
#common parameters
imu_topic: "/imu_ah100b/imu_raw" #"/imu_out"
image_topic_0: "/usb_cam_0/image_raw" #"/img_out_0"
image_topic_1: "/usb_cam_1/image_raw" #"/img_out_1"

#imu_topic: "/imu_out"
#image_topic_0: "/img_out_0"
#image_topic_1: "/img_out_1"

output_path: "/home/ccy/vins_test_ws/output"

# camera calibration, please replace it with your own calibration file.
image_width: 640
image_height: 480
cam_file_0: self_holder/cam_file_0.yaml
cam_file_1: self_holder/cam_file_1.yaml

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam



#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.0268014618074          # accelerometer measurement noise standard deviation. #0.599298904976
gyr_n: 0.00888232829671        # gyroscope measurement noise standard deviation.     #0.198614898699
acc_w: 0.00262960861593         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.000379565782927       # gyroscope bias random work noise standard deviation.     #4.0e-5

#imu parameters       The more accurate parameters you provide, the better performance
#acc_n: 7.6509e-02           # accelerometer measurement noise standard deviation. #0.599298904976
#gyr_n: 9.0086e-03          # gyroscope measurement noise standard deviation.     #0.198614898699
#acc_w: 5.3271e-02        # accelerometer bias random work noise standard deviation.  #0.02
#gyr_w: 5.5379e-05        # gyroscope bias random work noise standard deviation.     #4.0e-5

g_norm: 9.8015     # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "~/vins_test_ws/output/pose_graph_record/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu


#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
#rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
